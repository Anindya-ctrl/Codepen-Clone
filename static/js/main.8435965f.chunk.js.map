{"version":3,"sources":["components/CodeEditor.jsx","hooks/useLocalStorage.jsx","components/App.jsx","index.js"],"names":["CodeEditor","value","language","editorTitle","onChange","useState","editorOpen","setEditorOpen","className","type","onClick","preVal","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","mode","theme","lineNumbers","lineWrapping","useLocalStorage","key","initialValue","prefixedKey","jsonData","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","javascript","setJavascript","sourceDoc","setSourceDoc","timeout","setTimeout","clearTimeout","width","height","title","sandbox","srcDoc","ReactDOM","render","document","getElementById"],"mappings":"iPA2CeA,MAjCf,YAAiE,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,YAAaC,EAAY,EAAZA,SAChD,EAAsCC,oBAAS,GAA/C,mBAAQC,EAAR,KAAoBC,EAApB,KAIA,OACI,sBAAKC,UAAS,4BAAyBF,GAAc,oBAArD,UACI,sBAAKE,UAAU,cAAf,UACML,EACF,wBACIM,KAAK,SACLD,UAAU,yBACVE,QAAU,kBAAMH,GAAc,SAAAI,GAAM,OAAKA,MAH7C,SAKI,cAAC,IAAD,CAAiBC,KAAON,EAAaO,IAAgBC,WAI7D,cAAC,aAAD,CACIb,MAAQA,EACRO,UAAU,sBACVO,eAlBS,SAACC,EAAQC,EAAMhB,GAAf,OAAyBG,EAASH,IAmB3CiB,QAAS,CACLC,KAAMjB,EACNkB,MAAO,WACPC,aAAa,EACbC,cAAc,SCZnBC,MArBf,SAAyBC,EAAKC,GAC1B,IAAMC,EAAW,UAHN,kBAGM,OAAkBF,GAEnC,EAA4BnB,oBAAS,WACjC,IAAMsB,EAAWC,aAAaC,QAAQH,GACtC,OAAGC,EAAiBG,KAAKC,MAAMJ,GAEJ,oBAAjBF,EACCA,EAEAA,OAPf,mBAAQxB,EAAR,KAAe+B,EAAf,KAeA,OAJAC,qBAAU,WACN,OAAOL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUlC,MACzD,CAAEA,EAAOyB,IAEL,CAAEzB,EAAO+B,ICwCLI,MAzDf,WACI,MAA0Bb,EAAgB,OAAD,+FAAzC,mBAAQc,EAAR,KAAcC,EAAd,KACA,EAAwBf,EAAgB,MAAD,iGAAvC,mBAAQgB,EAAR,KAAaC,EAAb,KACA,EAAsCjB,EAAgB,KAAD,qHAArD,mBAAQkB,EAAR,KAAoBC,EAApB,KACA,EAAoCrC,mBAAS,IAA7C,mBAAQsC,EAAR,KAAmBC,EAAnB,KAgBA,OAdAX,qBAAU,WACN,IAAMY,EAAUC,YAAW,WAS3B,OARIF,EAAa,uDAAD,OAEKP,EAFL,+CAGME,EAHN,iDAIOE,EAJP,sDAQT,kBAAMM,aAAaF,MACvB,OACJ,CAAER,EAAME,EAAKE,IAGZ,qCACI,sBAAKjC,UAAU,cAAf,UACI,cAAC,EAAD,CACIP,MAAQoC,EACRnC,SAAS,MACTC,YAAY,OACZC,SAAWkC,IAEf,cAAC,EAAD,CACIrC,MAAQsC,EACRrC,SAAS,MACTC,YAAY,MACZC,SAAWoC,IAEf,cAAC,EAAD,CACIvC,MAAQwC,EACRvC,SAAS,aACTC,YAAY,aACZC,SAAWsC,OAInB,qBAAKlC,UAAU,iBAAf,SACI,wBACIwC,MAAM,OACNC,OAAO,OACPC,MAAM,SACNC,QAAQ,gBACRC,OAAST,U,MChD7BU,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,oB","file":"static/js/main.8435965f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\nimport 'codemirror/mode/xml/xml';\nimport 'codemirror/mode/css/css';\nimport 'codemirror/mode/javascript/javascript';\nimport { Controlled as ControlledEditor } from 'react-codemirror2';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCompressAlt, faExpandAlt } from '@fortawesome/free-solid-svg-icons';\n\nfunction CodeEditor({ value, language, editorTitle, onChange }) {\n    const [ editorOpen, setEditorOpen ] = useState(true);\n\n    const handleChange = (editor, data, value) => onChange(value);\n\n    return (\n        <div className={ `editor-container ${ !editorOpen && 'collapsed-editor' }` }>\n            <div className=\"editor-head\">\n                { editorTitle }\n                <button\n                    type=\"button\"\n                    className=\"expand-collapse-button\"\n                    onClick={ () => setEditorOpen(preVal => !preVal) }\n                >\n                    <FontAwesomeIcon icon={ editorOpen ? faCompressAlt : faExpandAlt } />\n                </button>\n            </div>\n\n            <ControlledEditor\n                value={ value }\n                className=\"code-mirror-wrapper\"\n                onBeforeChange={ handleChange }\n                options={{\n                    mode: language,\n                    theme: 'material',\n                    lineNumbers: true,\n                    lineWrapping: true,\n                }}\n            />\n        </div>\n    );\n}\n\nexport default CodeEditor;\n","import { useState, useEffect } from'react';\nconst PREFIX = 'codepen-clone-';\n\nfunction useLocalStorage(key, initialValue) {\n    const prefixedKey = `${ PREFIX }${ key }`;\n\n    const [ value, setValue ] = useState(() => {\n        const jsonData = localStorage.getItem(prefixedKey);\n        if(jsonData) return JSON.parse(jsonData);\n\n        if(typeof initialValue !== 'function') {\n            return initialValue;\n        } else {\n            return initialValue();\n        }\n    });\n\n    useEffect(() => {\n        return localStorage.setItem(prefixedKey, JSON.stringify(value));\n    }, [ value, prefixedKey ]);\n\n    return [ value, setValue ];\n}\n\nexport default useLocalStorage;\n","import React, { useState, useEffect } from 'react';\nimport CodeEditor from './CodeEditor';\nimport useLocalStorage from '../hooks/useLocalStorage';\n\nfunction App() {\n    const [ html, setHtml ] = useLocalStorage('html', `<!-- Markup is the core! -->\\n\\n<h1>Hello World!</h1>\\n<p>Try coding something!</p>\\n`);\n    const [ css, setCss ] = useLocalStorage('css', `/* Want it to look more gorgeous? */\\n\\nbody {\\n  display: grid;\\n  place-items: center;\\n}\\n`);\n    const [ javascript, setJavascript ] = useLocalStorage('js', `// Make your website functional!\\n\\ndocument.addEventListener('click', () => {\\n  console.log('Clicked!');\\n});\\n`);\n    const [ sourceDoc, setSourceDoc ] = useState('');\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setSourceDoc(`\n                <html>\n                    <body>${ html }</body>\n                    <style>${ css }</style>\n                    <script>${ javascript }</script>\n                </html>\n            `);\n\n        return () => clearTimeout(timeout);\n        }, 500);\n    }, [ html, css, javascript ]);\n\n    return (\n        <>\n            <div className=\"pen pen-top\">\n                <CodeEditor\n                    value={ html }\n                    language=\"xml\"\n                    editorTitle=\"HTML\"\n                    onChange={ setHtml }\n                />\n                <CodeEditor\n                    value={ css }\n                    language=\"css\"\n                    editorTitle=\"CSS\"\n                    onChange={ setCss }\n                />\n                <CodeEditor\n                    value={ javascript }\n                    language=\"javascript\"\n                    editorTitle=\"JavaScript\"\n                    onChange={ setJavascript }\n                />\n            </div>\n\n            <div className=\"pen pen-bottom\">\n                <iframe\n                    width=\"100%\"\n                    height=\"100%\"\n                    title=\"output\"\n                    sandbox=\"allow-scripts\"\n                    srcDoc={ sourceDoc }\n                />\n            </div>\n        </>\n\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './styles/App.css';\n\nReactDOM.render(<App />, document.getElementById('codepen-clone'));\n"],"sourceRoot":""}